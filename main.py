import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import json
from datetime import datetime
from io import BytesIO

# –ò–º–ø–æ—Ä—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤
from utils.parser import get_latest_articles, search_articles, fetch_article_content
from utils.parsing_rubriki import fetch_rubrika_articles, RUBRIKI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in .env file")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_ARTICLES = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
MAX_MESSAGE_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

# –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserManager:
    def __init__(self):
        self.users = {}
        self.load_users()

    def load_users(self):
        if os.path.exists("users.json"):
            with open("users.json", "r") as f:
                self.users = json.load(f)

    def save_users(self):
        with open("users.json", "w") as f:
            json.dump(self.users, f, indent=4)

    def add_user(self, user_id, name, phone):
        self.users[user_id] = {"name": name, "phone": phone}
        self.save_users()

    def get_user(self, user_id):
        return self.users.get(user_id)

user_manager = UserManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthStates(StatesGroup):
    WAITING_FOR_NAME = State()
    WAITING_FOR_PHONE = State()

class SearchStates(StatesGroup):
    WAITING_FOR_QUERY = State()

class RubrikaStates(StatesGroup):
    WAITING_FOR_RUBRIKA = State()
    WAITING_FOR_ARTICLE = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
latest_articles = []

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏",
            callback_data="kadrovik_latest"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–†—É–±—Ä–∏–∫–∏",
            callback_data="kadrovik_news"
        ),
        types.InlineKeyboardButton(
            text="–ü–æ–∏—Å–∫",
            callback_data="kadrovik_search"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–ü–æ–º–æ—â—å",
            callback_data="help"
        ),
        types.InlineKeyboardButton(
            text="–û –±–æ—Ç–µ",
            callback_data="about"
        )
    )
    return builder.as_markup()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user = user_manager.get_user(user_id)
    
    if user:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user['name']}!",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(AuthStates.WAITING_FOR_NAME)

@dp.message(AuthStates.WAITING_FOR_NAME)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(AuthStates.WAITING_FOR_PHONE)

@dp.message(AuthStates.WAITING_FOR_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = await state.get_data()
    user_manager.add_user(user_id, data['name'], message.text)
    await message.answer(
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {data['name']}!",
        reply_markup=get_main_menu()
    )
    await state.clear()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def send_article_content(chat_id: int, article: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        content = await fetch_article_content(article['url'])
        if not content:
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏")
            return

        header = f"üì∞ {article['title']}\nüìÖ {article['date']}\n\n"
        full_content = header + content

        if len(full_content) > MAX_MESSAGE_LENGTH:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            file = BytesIO(full_content.encode('utf-8'))
            file.name = f"{article['title'][:50]}.txt"
            await bot.send_document(chat_id, file)
        else:
            await bot.send_message(chat_id, full_content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback ---
@dp.callback_query(lambda c: c.data == "kadrovik_latest")
async def handle_latest_articles(callback: types.CallbackQuery):
    global latest_articles
    latest_articles = await get_latest_articles("ru")  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫
    
    if not latest_articles:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")
        return

    builder = InlineKeyboardBuilder()
    for i in range(min(len(latest_articles), MAX_ARTICLES)):
        builder.add(types.InlineKeyboardButton(
            text=f"–°—Ç–∞—Ç—å—è {i+1}",
            callback_data=f"article_{i}"
        ))
    builder.adjust(2)

    articles_list = "\n".join(
        f"{i+1}. {art['title']}" 
        for i, art in enumerate(latest_articles[:MAX_ARTICLES])
    )
    await callback.message.answer(
        f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:\n\n{articles_list}",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("article_"))
async def handle_article(callback: types.CallbackQuery):
    try:
        idx = int(callback.data.split("_")[1])
        if 0 <= idx < len(latest_articles):
            await send_article_content(callback.from_user.id, latest_articles[idx])
        else:
            await callback.message.answer("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except (IndexError, ValueError):
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏")

@dp.callback_query(lambda c: c.data == "kadrovik_search")
async def handle_search(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    await state.set_state(SearchStates.WAITING_FOR_QUERY)

@dp.callback_query(lambda c: c.data == "kadrovik_news")
async def handle_rubriki(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É–±—Ä–∏–∫ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ callback_data
    rubrika_ids = {name: f"rub_{hash(name) % 1000:03d}" for name in RUBRIKI}
    await state.update_data(rubrika_ids=rubrika_ids)
    
    for name, rub_id in rubrika_ids.items():
        builder.add(types.InlineKeyboardButton(
            text=name,
            callback_data=rub_id
        ))
    
    builder.add(types.InlineKeyboardButton(
        text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–ø—É—Å–∫–Ω—ã—Ö",
        url="https://kadrovik.uz/publish/doc/text199228_kalkulyator_otpusknyh"
    ))
    
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="main_menu"
    ))
    
    builder.adjust(1)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RubrikaStates.WAITING_FOR_RUBRIKA)

@dp.callback_query(RubrikaStates.WAITING_FOR_RUBRIKA)
async def handle_rubrika_select(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "main_menu":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await handle_main_menu(callback, state)
        return
    
    data = await state.get_data()
    rubrika_ids = data.get("rubrika_ids", {})
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É–±—Ä–∏–∫–∏ –ø–æ ID
    rubrika_name = next((name for name, rub_id in rubrika_ids.items() 
                        if rub_id == callback.data), None)
    
    if not rubrika_name or rubrika_name not in RUBRIKI:
        await callback.message.answer("–†—É–±—Ä–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    articles = await fetch_rubrika_articles(RUBRIKI[rubrika_name])
    if not articles:
        await callback.message.answer("–í —ç—Ç–æ–π —Ä—É–±—Ä–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_articles=articles)
    
    builder = InlineKeyboardBuilder()
    for i in range(min(len(articles), MAX_ARTICLES)):
        builder.add(types.InlineKeyboardButton(
            text=f"–°—Ç–∞—Ç—å—è {i+1}",
            callback_data=f"rub_art_{i}"
        ))
    
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="kadrovik_news"  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä—É–±—Ä–∏–∫
    ))
    builder.adjust(2)
    
    articles_list = "\n".join(
        f"{i+1}. {art['title']}" 
        for i, art in enumerate(articles[:MAX_ARTICLES])
    )
    await callback.message.answer(
        f"üìö –†—É–±—Ä–∏–∫–∞: {rubrika_name}\n\n{articles_list}",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RubrikaStates.WAITING_FOR_ARTICLE)

@dp.callback_query(RubrikaStates.WAITING_FOR_ARTICLE)
async def handle_rubrika_article(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "kadrovik_news":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await handle_rubriki(callback, state)
        return
    
    try:
        data = await state.get_data()
        articles = data.get("current_articles", [])
        
        if callback.data.startswith("rub_art_"):
            idx = int(callback.data.split("_")[2])
            if 0 <= idx < len(articles):
                await send_article_content(callback.from_user.id, articles[idx])
            else:
                await callback.message.answer("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ä—É–±—Ä–∏–∫–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏")

@dp.callback_query(lambda c: c.data == "kadrovik_news")
async def handle_rubriki(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É–±—Ä–∏–∫ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ callback_data
    rubrika_ids = {name: f"rub_{hash(name) % 1000:03d}" for name in RUBRIKI}
    await state.update_data(rubrika_ids=rubrika_ids)
    
    for name, rub_id in rubrika_ids.items():
        builder.add(types.InlineKeyboardButton(
            text=name,
            callback_data=rub_id
        ))
    
    builder.add(types.InlineKeyboardButton(
        text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–ø—É—Å–∫–Ω—ã—Ö",
        url="https://kadrovik.uz/publish/doc/text199228_kalkulyator_otpusknyh"
    ))
    
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="main_menu"  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ))
    
    builder.adjust(1)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RubrikaStates.WAITING_FOR_RUBRIKA)

@dp.callback_query(RubrikaStates.WAITING_FOR_ARTICLE)
async def handle_rubrika_article(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "kadrovik_news":
        await handle_rubriki(callback, state)
        return
    
    try:
        data = await state.get_data()
        articles = data.get("current_articles", [])
        
        if callback.data.startswith("rub_art_"):
            idx = int(callback.data.split("_")[2])
            if 0 <= idx < len(articles):
                await send_article_content(callback.from_user.id, articles[idx])
            else:
                await callback.message.answer("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ä—É–±—Ä–∏–∫–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏")

@dp.callback_query(lambda c: c.data == "help")
async def handle_help(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫'\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π"
    )

@dp.callback_query(lambda c: c.data == "about")
async def handle_about(callback: types.CallbackQuery):
    await callback.message.answer(
        "ü§ñ –û –±–æ—Ç–µ:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Å–∞–π—Ç–∞ Kadrovik.uz\n"
        "–í–µ—Ä—Å–∏—è: 1.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è"
    )

@dp.callback_query(lambda c: c.data == "main_menu")
async def handle_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
@dp.message(SearchStates.WAITING_FOR_QUERY)
async def process_search(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        return
    
    articles = await search_articles(query, "ru")
    if not articles:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    await state.update_data(search_results=articles)
    
    builder = InlineKeyboardBuilder()
    for i in range(min(len(articles), MAX_ARTICLES)):
        builder.add(types.InlineKeyboardButton(
            text=f"–°—Ç–∞—Ç—å—è {i+1}",
            callback_data=f"search_art_{i}"
        ))
    builder.adjust(2)
    
    articles_list = "\n".join(
        f"{i+1}. {art['title']}" 
        for i, art in enumerate(articles[:MAX_ARTICLES])
    )
    await message.answer(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n{articles_list}",
        reply_markup=builder.as_markup()
    )
    await state.clear()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def check_auth(message: types.Message):
    if not user_manager.get_user(str(message.from_user.id)):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())